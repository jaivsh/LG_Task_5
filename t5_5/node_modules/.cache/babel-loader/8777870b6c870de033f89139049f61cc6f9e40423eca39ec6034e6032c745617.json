{"ast":null,"code":"var _jsxFileName = \"/Users/bhoomishukla/myapp/src/RotatingImage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport firstImage from './s1.png';\nimport secondImage from './s2.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RotatingImage = () => {\n  _s();\n  const [isFirstImage, setIsFirstImage] = useState(true);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsFirstImage(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Calculate points for regular polygons\n  const getPolygonPoints = (centerX, centerY, radius, sides) => {\n    const points = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i * (360 / sides) * Math.PI / 180;\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      points.push(`${x},${y}`);\n    }\n    return points.join(' ');\n  };\n\n  // Define points for shapes with proper scaling\n  const squarePoints = \"75,75 225,75 225,225 75,225\"; // Centered square\n  const hexagonPoints = getPolygonPoints(150, 150, 75, 6); // Smaller radius\n  const dodecagonPoints = getPolygonPoints(150, 150, 75, 12); // Smaller radius\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rotating-container\",\n    style: {\n      background: 'purple',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '300px',\n        height: '300px',\n        background: 'white'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '300px',\n          height: '300px',\n          animation: 'rotateShape 12s linear infinite'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"300\",\n          height: \"300\",\n          viewBox: \"0 0 300 300\",\n          children: /*#__PURE__*/_jsxDEV(\"g\", {\n            className: \"morphing-shape\",\n            children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n              fill: \"#0066ff\",\n              className: \"polygon-morph\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"150\",\n              cy: \"150\",\n              r: \"75\" // Smaller radius\n              ,\n              fill: \"#0066ff\",\n              className: \"circle-shape\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          width: '150px',\n          // Smaller image\n          height: '150px',\n          zIndex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100%',\n            height: '100%',\n            animation: isFirstImage ? 'rotateImageFirst 1s linear forwards' : 'rotateImageSecond 1s linear forwards'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: isFirstImage ? firstImage : secondImage,\n            alt: isFirstImage ? \"First state\" : \"Second state\",\n            style: {\n              width: '100%',\n              height: '100%',\n              objectFit: 'cover'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .polygon-morph {\n            animation: morphSequence 12s linear infinite;\n          }\n\n          .circle-shape {\n            opacity: 0;\n            animation: fadeCircle 12s linear infinite;\n          }\n\n          @keyframes morphSequence {\n            0% { \n              points: ${squarePoints};\n              opacity: 1;\n            }\n            20% { \n              points: ${squarePoints};\n              opacity: 1;\n            }\n            25% { \n              points: ${hexagonPoints};\n              opacity: 1;\n            }\n            45% { \n              points: ${hexagonPoints};\n              opacity: 1;\n            }\n            50% { \n              points: ${dodecagonPoints};\n              opacity: 1;\n            }\n            70% {\n              points: ${dodecagonPoints};\n              opacity: 1;\n            }\n            75% {\n              opacity: 0;\n            }\n            95% {\n              opacity: 0;\n            }\n            100% {\n              points: ${squarePoints};\n              opacity: 1;\n            }\n          }\n\n          @keyframes fadeCircle {\n            0%, 70% {\n              opacity: 0;\n            }\n            75% {\n              opacity: 1;\n            }\n            95% {\n              opacity: 1;\n            }\n            100% {\n              opacity: 0;\n            }\n          }\n\n          @keyframes rotateShape {\n            from { transform: rotate(0deg); }\n            to { transform: rotate(360deg); }\n          }\n\n          @keyframes rotateImageFirst {\n            0% { transform: rotate(0deg) scale(1); }\n            100% { transform: rotate(180deg) scale(0.5); }\n          }\n\n          @keyframes rotateImageSecond {\n            0% { transform: rotate(0deg) scale(0.5); }\n            100% { transform: rotate(180deg) scale(1); }\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(RotatingImage, \"8P6DFlsV4aYnEIuEKq+HdFQSgNo=\");\n_c = RotatingImage;\nexport default RotatingImage;\nvar _c;\n$RefreshReg$(_c, \"RotatingImage\");","map":{"version":3,"names":["React","useState","useEffect","firstImage","secondImage","jsxDEV","_jsxDEV","RotatingImage","_s","isFirstImage","setIsFirstImage","timer","setTimeout","clearTimeout","getPolygonPoints","centerX","centerY","radius","sides","points","i","angle","Math","PI","x","cos","y","sin","push","join","squarePoints","hexagonPoints","dodecagonPoints","className","style","background","padding","children","position","width","height","top","left","animation","viewBox","fill","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","r","transform","zIndex","src","alt","objectFit","_c","$RefreshReg$"],"sources":["/Users/bhoomishukla/myapp/src/RotatingImage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport firstImage from './s1.png';\nimport secondImage from './s2.png';\n\nconst RotatingImage = () => {\n  const [isFirstImage, setIsFirstImage] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsFirstImage(false);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Calculate points for regular polygons\n  const getPolygonPoints = (centerX, centerY, radius, sides) => {\n    const points = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = (i * (360 / sides)) * Math.PI / 180;\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      points.push(`${x},${y}`);\n    }\n    return points.join(' ');\n  };\n\n  // Define points for shapes with proper scaling\n  const squarePoints = \"75,75 225,75 225,225 75,225\";  // Centered square\n  const hexagonPoints = getPolygonPoints(150, 150, 75, 6);  // Smaller radius\n  const dodecagonPoints = getPolygonPoints(150, 150, 75, 12);  // Smaller radius\n\n  return (\n    <div className=\"rotating-container\" style={{ background: 'purple', padding: '20px' }}>\n      <div style={{ position: 'relative', width: '300px', height: '300px', background: 'white' }}>\n        {/* Shape container */}\n        <div style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '300px',\n          height: '300px',\n          animation: 'rotateShape 12s linear infinite'\n        }}>\n          <svg width=\"300\" height=\"300\" viewBox=\"0 0 300 300\">\n            <g className=\"morphing-shape\">\n              <polygon \n                fill=\"#0066ff\"\n                className=\"polygon-morph\"\n              />\n              <circle \n                cx=\"150\" \n                cy=\"150\" \n                r=\"75\"  // Smaller radius\n                fill=\"#0066ff\" \n                className=\"circle-shape\"\n              />\n            </g>\n          </svg>\n        </div>\n\n        {/* Image container */}\n        <div \n          style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: '150px',  // Smaller image\n            height: '150px',\n            zIndex: 1\n          }}\n        >\n          <div style={{\n            width: '100%',\n            height: '100%',\n            animation: isFirstImage \n              ? 'rotateImageFirst 1s linear forwards'\n              : 'rotateImageSecond 1s linear forwards'\n          }}>\n            <img\n              src={isFirstImage ? firstImage : secondImage}\n              alt={isFirstImage ? \"First state\" : \"Second state\"}\n              style={{\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover'\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      \n      <style>\n        {`\n          .polygon-morph {\n            animation: morphSequence 12s linear infinite;\n          }\n\n          .circle-shape {\n            opacity: 0;\n            animation: fadeCircle 12s linear infinite;\n          }\n\n          @keyframes morphSequence {\n            0% { \n              points: ${squarePoints};\n              opacity: 1;\n            }\n            20% { \n              points: ${squarePoints};\n              opacity: 1;\n            }\n            25% { \n              points: ${hexagonPoints};\n              opacity: 1;\n            }\n            45% { \n              points: ${hexagonPoints};\n              opacity: 1;\n            }\n            50% { \n              points: ${dodecagonPoints};\n              opacity: 1;\n            }\n            70% {\n              points: ${dodecagonPoints};\n              opacity: 1;\n            }\n            75% {\n              opacity: 0;\n            }\n            95% {\n              opacity: 0;\n            }\n            100% {\n              points: ${squarePoints};\n              opacity: 1;\n            }\n          }\n\n          @keyframes fadeCircle {\n            0%, 70% {\n              opacity: 0;\n            }\n            75% {\n              opacity: 1;\n            }\n            95% {\n              opacity: 1;\n            }\n            100% {\n              opacity: 0;\n            }\n          }\n\n          @keyframes rotateShape {\n            from { transform: rotate(0deg); }\n            to { transform: rotate(360deg); }\n          }\n\n          @keyframes rotateImageFirst {\n            0% { transform: rotate(0deg) scale(1); }\n            100% { transform: rotate(180deg) scale(0.5); }\n          }\n\n          @keyframes rotateImageSecond {\n            0% { transform: rotate(0deg) scale(0.5); }\n            100% { transform: rotate(180deg) scale(1); }\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default RotatingImage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}